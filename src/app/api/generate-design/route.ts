import { NextRequest, NextResponse } from 'next/server'
import { spawn } from 'child_process'
import { writeFile, mkdir } from 'fs/promises'
import { join } from 'path'
import { v4 as uuidv4 } from 'uuid'
import { readFileSync, existsSync } from 'fs'

// Helper: prefer venv python if present, otherwise platform fallback
function getPythonExecutable(): string {
  const winVenv = join(process.cwd(), 'scripts', 'venv', 'Scripts', 'python.exe')
  const posixVenv = join(process.cwd(), 'scripts', 'venv', 'bin', 'python')
  if (existsSync(winVenv)) return winVenv
  if (existsSync(posixVenv)) return posixVenv
  return process.platform === 'win32' ? 'py' : 'python3'
}

/**
 * Extract the first balanced JSON object or array from arbitrary text.
 * This ignores any trailing logs, emojis, or text that Python prints.
 */
function extractFirstJson(text: string): string | null {
  if (!text) return null
  const startObj = text.indexOf('{')
  const startArr = text.indexOf('[')

  let start = -1
  if (startObj === -1) start = startArr
  else if (startArr === -1) start = startObj
  else start = Math.min(startObj, startArr)

  if (start === -1) return null

  const open = text[start] === '{' ? '{' : '['
  const close = open === '{' ? '}' : ']'

  let depth = 0
  for (let i = start; i < text.length; i++) {
    const ch = text[i]
    if (ch === open) depth++
    else if (ch === close) depth--

    if (depth === 0) {
      return text.slice(start, i + 1)
    }
  }

  return null
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()

    const { colors, fabrics, prints, garmentType, silhouette, sleeves, neckline, trims, description } = body

    const tempDir = join(process.cwd(), 'temp')
    if (!existsSync(tempDir)) {
      await mkdir(tempDir, { recursive: true })
    }

    const payload = {
      id: uuidv4(),
      user_content: {
        colors: colors || [],
        fabrics: fabrics || [],
        prints: prints || [],
        garment_type: garmentType,
        silhouette: silhouette,
        sleeves: sleeves,
        neckline: neckline,
        trims_and_details: trims ? [trims] : [],
        variants: 1,
        description: description || "",
        user_override_prompt: description || "",
      },
      system_prompt:
        'You are a fashion product design assistant. Respond ONLY with valid JSON (no extra explanation).',
    }

    const payloadPath = join(tempDir, `payload_${Date.now()}.json`)
    await writeFile(payloadPath, JSON.stringify(payload, null, 2))

    return new Promise((resolve) => {
      const pythonCmd = getPythonExecutable()
      const scriptPath = join(process.cwd(), 'scripts', 'test_agent2_payload.py')

      const pythonProcess = spawn(pythonCmd, [scriptPath, payloadPath], {
        stdio: ['ignore', 'pipe', 'pipe'],
        shell: false,
        env: { ...process.env },
      })

      let stdout = ''
      let stderr = ''

      pythonProcess.stdout.on('data', (data) => {
        stdout += data.toString()
        console.log('[PYOUT]', data.toString())
      })

      pythonProcess.stderr.on('data', (data) => {
        stderr += data.toString()
        console.error('[PYERR]', data.toString())
      })

      pythonProcess.on('close', (code) => {
        console.log('Python process closed with code:', code)

        if (code === 0) {
          try {
            let parsedData: any
            const extracted = extractFirstJson(stdout)
            if (!extracted) {
              throw new Error('No JSON found in Python stdout')
            }

            try {
              parsedData = JSON.parse(extracted)
            } catch (parseError) {
              throw new Error(
                `Invalid JSON after extraction: ${(parseError as Error).message}`,
              )
            }

            let designData
            if (Array.isArray(parsedData) && parsedData.length > 0) {
              designData = parsedData[0]
            } else if (parsedData && (parsedData.design_id || parsedData.title)) {
              designData = parsedData
            } else {
              throw new Error('Unexpected JSON structure for design')
            }

            resolve(
              NextResponse.json({
                success: true,
                design: designData,
                message: 'Design generated successfully',
              }),
            )
          } catch (err) {
            const msg = err instanceof Error ? err.message : String(err ?? 'unknown error')
            console.error('Error processing design output:', msg)

            const fallbackDesign = {
              design_id: `FALLBACK_${Date.now()}`,
              title: 'AI Generated Design (fallback)',
              image_prompt: 'Fashion design generated by AI',
              color_palette: ['brown', 'white'],
              fabrics: ['cotton'],
              prints_patterns: ['solids'],
              garment_type: 'dress',
              silhouette: 'A-line',
              sleeves: 'Full sleeves',
              neckline: 'Crew neck',
              length: 'Midi',
              style_fit: ['comfortable'],
              trims_and_details: [],
              techpack: 'Standard construction',
              provenance: 'AI-generated with fallback parsing',
              design_text: 'Fallback design due to parsing issues',
            }

            resolve(
              NextResponse.json({
                success: true,
                design: fallbackDesign,
                message: 'Design generated with fallback (parsing issues detected)',
                debug: { parseError: msg },
              }),
            )
          }
        } else {
          console.error('Python script failed with code:', code, 'stderr:', stderr)

          resolve(
            NextResponse.json(
              {
                success: false,
                design: null,
                error: `Script execution failed (exit ${code}): ${stderr.substring(
                  0,
                  1000,
                )}`,
              },
              { status: 500 },
            ),
          )
        }
      })

      pythonProcess.on('error', (error) => {
        const msg =
          error instanceof Error ? error.message : String(error ?? 'unknown spawn error')
        resolve(
          NextResponse.json(
            {
              success: false,
              design: null,
              error: `Failed to execute script: ${msg}`,
            },
            { status: 500 },
          ),
        )
      })
    })
  } catch (error) {
    const msg = error instanceof Error ? error.message : String(error ?? 'unknown error')
    console.error('Error generating design:', msg)
    return NextResponse.json(
      { success: false, design: null, error: 'Failed to generate design: ' + msg },
      { status: 500 },
    )
  }
}
